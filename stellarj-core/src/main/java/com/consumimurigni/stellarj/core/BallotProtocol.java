package com.consumimurigni.stellarj.core;

import static com.consumimurigni.stellarj.xdr.Assertions.assertEquals;
import static com.consumimurigni.stellarj.xdr.XdrUtils.uint32Equals;
import static com.consumimurigni.stellarj.xdr.XdrUtils.uint32EqualsZero;
import static com.consumimurigni.stellarj.xdr.XdrUtils.uint32GtZero;
import static com.consumimurigni.stellarj.xdr.XdrUtils.uint32LesserThan;
import static com.consumimurigni.stellarj.xdr.XdrUtils.uint32LesserThanOrEquals;
import static com.consumimurigni.stellarj.xdr.XdrUtils.valueEmpty;
import static com.consumimurigni.stellarj.xdr.XdrUtils.valueEquals;
import static com.consumimurigni.stellarj.xdr.XdrUtils.valueLesserThan;
import static com.google.common.base.Preconditions.checkNotNull;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.function.Predicate;

import javax.annotation.Nullable;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.stellar.sdk.xdr.Hash;
import org.stellar.sdk.xdr.NodeID;
import org.stellar.sdk.xdr.SCPBallot;
import org.stellar.sdk.xdr.SCPEnvelope;
import org.stellar.sdk.xdr.SCPStatement;
import org.stellar.sdk.xdr.SCPStatement.SCPStatementPledges;
import org.stellar.sdk.xdr.SCPStatement.SCPStatementPledges.SCPStatementConfirm;
import org.stellar.sdk.xdr.SCPStatement.SCPStatementPledges.SCPStatementExternalize;
import org.stellar.sdk.xdr.SCPStatement.SCPStatementPledges.SCPStatementPrepare;
import org.stellar.sdk.xdr.SCPStatementType;
import org.stellar.sdk.xdr.Uint32;
import org.stellar.sdk.xdr.Value;

import com.consumimurigni.stellarj.core.SCP.EnvelopeState;
import com.consumimurigni.stellarj.core.SCPDriver.ValidationLevel;
import com.consumimurigni.stellarj.xdr.Assertions;
import com.consumimurigni.stellarj.xdr.UInt32Interval;
import com.consumimurigni.stellarj.xdr.XdrUtils;
import com.google.common.base.Preconditions;

public class BallotProtocol {

	static final int MAX_ADVANCE_SLOT_RECURSION = 50;

	Slot mSlot;

	Boolean mHeardFromQuorum;

	// state tracking members
	enum SCPPhase {
		SCP_PHASE_PREPARE, SCP_PHASE_CONFIRM, SCP_PHASE_EXTERNALIZE, SCP_PHASE_NUM
	};

	// human readable names matching SCPPhase
	//public static String[] phaseNames /*[SCP_PHASE_NUM]*/ = {"PREPARE", "FINISH", "EXTERNALIZE"};

	@Nullable
	SCPBallot mCurrentBallot; // b
	SCPBallot mPrepared; // p
	SCPBallot mPreparedPrime; // p'
	SCPBallot mHighBallot; // h
	SCPBallot mCommit; // c
	Map<NodeID, SCPEnvelope> mLatestEnvelopes; // M
	SCPPhase mPhase; // Phi

	int mCurrentMessageLevel; // number of messages triggered in one run

	SCPEnvelope mLastEnvelope; // last envelope generated by this node

	SCPEnvelope mLastEnvelopeEmit; // last envelope emitted by this node

	public BallotProtocol(Slot slot) {
		this.mSlot = slot;
		this.mHeardFromQuorum = true;
		this.mPhase = SCPPhase.SCP_PHASE_PREPARE;
		this.mCurrentMessageLevel = 0;
	}

	boolean isNewerStatement(NodeID nodeID, SCPStatement st)
	{
		SCPEnvelope oldp = mLatestEnvelopes.get(nodeID);
	    boolean res = false;

	    if (oldp == null)
	    {
	        res = true;
	    }
	    else
	    {
	        res = isNewerStatement(oldp.getStatement(), st);
	    }
	    return res;
	}

	boolean isNewerStatement(SCPStatement oldst,
	                                 SCPStatement st)
	{
	    boolean res = false;

	    // total ordering described in SCP paper.
	    SCPStatementType stType = st.getPledges().getDiscriminant();
	    SCPStatementType oldstType = oldst.getPledges().getDiscriminant();

	    // statement type (PREPARE < CONFIRM < EXTERNALIZE)
	    if (oldstType != stType)
	    {
	        res = (oldstType.getValue() < stType.getValue());
	    }
	    else
	    {
	        // can't have duplicate EXTERNALIZE statements
	        if (stType == SCPStatementType.SCP_ST_EXTERNALIZE)
	        {
	            res = false;
	        }
	        else if (stType == SCPStatementType.SCP_ST_CONFIRM)
	        {
	            // sorted by (b, p, p', h) (p' = 0 implicitely)
	            SCPStatementConfirm oldC = oldst.getPledges().getConfirm();
	            SCPStatementConfirm c = st.getPledges().getConfirm();
	            int compBallot = compareBallots(oldC.getBallot(), c.getBallot());
	            if (compBallot < 0)
	            {
	                res = true;
	            }
	            else if (compBallot == 0)
	            {
	                if (uint32Equals(oldC.getNPrepared(), c.getNPrepared()))
	                {
	                    res = (uint32LesserThan(oldC.getNH(), c.getNH()));
	                }
	                else
	                {
	                    res = uint32LesserThan(oldC.getNPrepared(), c.getNPrepared());
	                }
	            }
	        }
	        else
	        {
	            // Lexicographical order between PREPARE statements:
	            // (b, p, p', h)
	            SCPStatementPrepare oldPrep = oldst.getPledges().getPrepare();
	            SCPStatementPrepare prep = st.getPledges().getPrepare();

	            int compBallot = compareBallots(oldPrep.getBallot(), prep.getBallot());
	            if (compBallot < 0)
	            {
	                res = true;
	            }
	            else if (compBallot == 0)
	            {
	                compBallot = compareBallots(oldPrep.getPrepared(), prep.getPrepared());
	                if (compBallot < 0)
	                {
	                    res = true;
	                }
	                else if (compBallot == 0)
	                {
	                    compBallot = compareBallots(oldPrep.getPreparedPrime(),
	                                                prep.getPreparedPrime());
	                    if (compBallot < 0)
	                    {
	                        res = true;
	                    }
	                    else if (compBallot == 0)
	                    {
	                        res = (uint32LesserThan(oldPrep.getNH(), prep.getNH()));
	                    }
	                }
	            }
	        }
	    }

	    return res;
	}

	void recordEnvelope(SCPEnvelope env)
	{
	SCPStatement st = env.getStatement();
    mLatestEnvelopes.put(st.getNodeID(), env);
	    mSlot.recordStatement(env.getStatement());
	}
private static final Logger log = LogManager.getLogger();
	EnvelopeState processEnvelope(SCPEnvelope envelope, boolean self)
	{
	    EnvelopeState res = EnvelopeState.INVALID;
	    assertEquals(envelope.getStatement().getSlotIndex(), mSlot.getSlotIndex());

	    SCPStatement statement = envelope.getStatement();
	    NodeID nodeID = statement.getNodeID();

	    if (!isStatementSane(statement, self))
	    {
	        if (self)
	        {
	            log.error("SCP not sane statement from self, skipping  e: {}", mSlot.getSCP().envToStr(envelope));
	        }

	        return SCP.EnvelopeState.INVALID;
	    }

	    if (!isNewerStatement(nodeID, statement))
	    {
	        if (self)
	        {
	            log.error("SCP stale statement from self, skipping  e: {}", mSlot.getSCP().envToStr(envelope));
	        }
	        else
	        {
	            log.trace("SCP stale statement from self, skipping  i: {}", mSlot.getSlotIndex().getUint64());
	        }

	        return SCP.EnvelopeState.INVALID;
	    }

	    ValidationLevel validationRes = validateValues(statement);
	    if (validationRes != SCPDriver.ValidationLevel.kInvalidValue)
	    {
	        boolean processed = false;

	        if (mPhase != SCPPhase.SCP_PHASE_EXTERNALIZE)
	        {
	            if (validationRes == SCPDriver.ValidationLevel.kMaybeValidValue)
	            {
	                mSlot.setFullyValidated(false);
	            }

	            recordEnvelope(envelope);
	            processed = true;
	            advanceSlot(statement);
	            res = SCP.EnvelopeState.VALID;
	        }

	        if (!processed)
	        {
	            // note: this handles also our own messages
	            // in particular our final EXTERNALIZE message
	            if (mPhase == SCPPhase.SCP_PHASE_EXTERNALIZE &&
	                XdrUtils.valueEquals(mCommit.getValue(), getWorkingBallot(statement).getValue()))
	            {
	                recordEnvelope(envelope);
	                res = SCP.EnvelopeState.VALID;
	            }
	            else
	            {
	                if (self)
	                {
	    	            log.error("SCP externalize statement with invalid value from self, skipping e: {}", mSlot.getSCP().envToStr(envelope));
	                }

	                res = SCP.EnvelopeState.INVALID;
	            }
	        }
	    }
	    else
	    {
	        // If the value is not valid, we just ignore it.
	        if (self)
	        {
	            log.error("SCP invalid value from self, skipping e: {}", mSlot.getSCP().envToStr(envelope));
	        }
	        else
	        {
	            log.trace("SCP invalid value i: {}", mSlot.getSlotIndex().getUint64());
	        }

	        res = SCP.EnvelopeState.INVALID;
	    }
	    return res;
	}
	
	boolean isStatementSane(SCPStatement st, boolean self)
	{
	    boolean res = true;

	    switch (st.getPledges().getDiscriminant())
	    {
	    case SCP_ST_PREPARE:
	    {
	    	SCPStatementPrepare p = checkNotNull(st.getPledges().getPrepare());
	        // self is allowed to have b = 0 (as long as it never gets emitted)
	        boolean isOK = self || uint32GtZero(p.getBallot().getCounter());

	        isOK = isOK &&
	               ((p.getPreparedPrime() == null || p.getPrepared() == null) ||
	                (areBallotsLessAndIncompatible(p.getPreparedPrime(), p.getPrepared())));

	        isOK =
	            isOK && 
	            (uint32EqualsZero(p.getNH()) 
	            || 
	            (p.getPrepared() != null && uint32LesserThanOrEquals(p.getNH(), p.getPrepared().getCounter())));

	        // c != 0 -> c <= h <= b
	        isOK = isOK && (uint32EqualsZero(p.getNC()) || (p.getNH().getUint32().intValue() != 0 && p.getBallot().getCounter().getUint32().intValue() >= p.getNH().getUint32().intValue() &&
	                                      p.getNH().getUint32().intValue() >= p.getNC().getUint32().intValue()));

	        if (!isOK)
	        {
	            log.debug("SCP Malformed PREPARE message");
	            res = false;
	        }
	    }
	    break;
	    case SCP_ST_CONFIRM:
	    {
	        SCPStatementConfirm c = checkNotNull(st.getPledges().getConfirm());
	        // c <= h <= b
	        res = c.getBallot().getCounter().getUint32() > 0;
	        res = res && (c.getNH().getUint32() <= c.getBallot().getCounter().getUint32());
	        res = res && (c.getNCommit().getUint32() <= c.getNH().getUint32());
	        if (!res)
	        {
	            log.debug("SCP Malformed CONFIRM message");
	        }
	    }
	    break;
	    case SCP_ST_EXTERNALIZE:
	    {
	        SCPStatementExternalize e = checkNotNull(st.getPledges().getExternalize());

	        res = e.getCommit().getCounter().getUint32() > 0;
	        res = res && e.getNH().getUint32() >= e.getCommit().getCounter().getUint32();

	        if (!res)
	        {
	            log.debug("SCP Malformed EXTERNALIZE message");
	        }
	    }
	    break;
	    default:
	        Assertions.abort();
	    }

	    return res;
	}

	boolean abandonBallot(Uint32 n)
	{
	    log.debug("SCP BallotProtocol::abandonBallot");
	    boolean res = false;
	    Value v = mSlot.getLatestCompositeCandidate();
	    if (valueEmpty(v))
	    {
	        if (mCurrentBallot != null)
	        {
	            v = mCurrentBallot.getValue();
	        }
	    }
	    if (! valueEmpty(v))
	    {
	        if (n.getUint32().intValue() == 0)
	        {
	            res = bumpState(v, true);
	        }
	        else
	        {
	            res = bumpState(v, n);
	        }
	    }
	    return res;
	}

	boolean bumpState(Value value, boolean force)
	{
	    if (!force && (mCurrentBallot != null))
	    {
	        return false;
	    }

	    //SCPBallot newb;//?????????? C++ unused ?? bug ??

	    Uint32 n = new Uint32();
	    n.setUint32(mCurrentBallot != null ? (mCurrentBallot.getCounter().getUint32() + 1) : 1);

	    return bumpState(value, n);
	}

	boolean bumpState(Value value, Uint32 n)
	{
	    if (mPhase != SCPPhase.SCP_PHASE_PREPARE && mPhase != SCPPhase.SCP_PHASE_CONFIRM)
	    {
	        return false;
	    }

	    SCPBallot newb;

	    if (mHighBallot != null)
	    {
	        // can only bump the counter if we committed to something already
	    	newb = XdrUtils.newSCPBallot(n, mHighBallot.getValue());
	    }
	    else
	    {
	    	newb = XdrUtils.newSCPBallot(n, value);
	    }

	    log.debug("SCP BallotProtocol::bumpState  i: {} v: {}", mSlot.getSlotIndex().getUint64(), mSlot.getSCP().ballotToStr(newb));

	    boolean updated = updateCurrentValue(newb);

	    if (updated)
	    {
	        mSlot.getSCPDriver().startedBallotProtocol(mSlot.getSlotIndex(), newb);
	        emitCurrentStateStatement();
	    }

	    return updated;
	}

	// updates the local state based to the specificed ballot
	// (that could be a prepared ballot) enforcing invariants
	boolean updateCurrentValue(SCPBallot ballot)
	{
	    if (mPhase != SCPPhase. SCP_PHASE_PREPARE && mPhase != SCPPhase.SCP_PHASE_CONFIRM)
	    {
	        return false;
	    }

	    boolean updated = false;
	    if (mCurrentBallot == null)
	    {
	        bumpToBallot(ballot, true);
	        updated = true;
	    }
	    else
	    {
	        Assertions.assertTrue(compareBallots(mCurrentBallot, ballot) <= 0);

	        if (mCommit != null && !areBallotsCompatible(mCommit, ballot))
	        {
	            return false;
	        }

	        int comp = compareBallots(mCurrentBallot, ballot);
	        if (comp < 0)
	        {
	            bumpToBallot(ballot, true);
	            updated = true;
	        }
	        else if (comp > 0)
	        {
	            // this code probably changes with the final version
	            // of the conciliator

	            // this case may happen if the other nodes are not
	            // following the protocol (and we end up with a smaller value)
	            // not sure what is the best way to deal
	            // with this situation
	            log.error("SCP BallotProtocol::updateCurrentValue attempt to bump to a smaller value");
	            // can't just bump to the value as we may already have
	            // statements at counter+1
	            return false;
	        }
	    }

	    if (updated)
	    {
	        log.trace("SCP BallotProtocol::updateCurrentValue updated");
	    }

	    checkInvariants();

	    return updated;
	}
	
	void bumpToBallot(SCPBallot ballot, boolean check)
	{
	    log.debug("SCP BallotProtocol::bumpToBallot i: {} b: {}",mSlot.getSlotIndex().getUint64(), mSlot.getSCP().ballotToStr(ballot));

	    // `bumpToBallot` should be never called once we committed.
	    Assertions.assertTrue(mPhase != SCPPhase.SCP_PHASE_EXTERNALIZE);

	    if (check)
	    {
	        // We should move mCurrentBallot monotonically only
	    	Assertions.assertTrue(mCurrentBallot == null ||
	                  compareBallots(ballot, mCurrentBallot) >= 0);
	    }

	    boolean gotBumped = mCurrentBallot == null || !(XdrUtils.ballotEquals(mCurrentBallot, ballot));

	    mCurrentBallot = ballot;//??? make_unique<SCPBallot>(ballot);

	    mHeardFromQuorum = false;

	    if (gotBumped) {
	        startBallotProtocolTimer();
	    }
	}

	void startBallotProtocolTimer()
	{
		long timeout = mSlot.getSCPDriver().computeTimeout(mCurrentBallot.getCounter());
//
//	    std::shared_ptr<Slot> slot = mSlot.shared_from_this();
	    mSlot.getSCPDriver()
	    .setupTimer(
	        mSlot.getSlotIndex(), Slot.timerIDs.BALLOT_PROTOCOL_TIMER, timeout,
	        () -> {
	        	mSlot.getBallotProtocol().ballotProtocolTimerExpired();
	        });
	}

	void ballotProtocolTimerExpired()
	{
	    // don't abandon the ballot until we have heard from a slice
	    if (Boolean.TRUE.equals(mHeardFromQuorum))
	    {
	        abandonBallot(XdrUtils.UINT32_ZERO);
	    }
	    else
	    {
	        log.debug("SCP Waiting to hear from a slice.");
	        startBallotProtocolTimer();
	    }
	}

	SCPStatement createStatement(SCPStatementType type)
	{
	    SCPStatement statement = new SCPStatement();

	    checkInvariants();
	    SCPStatementPledges pledges = new SCPStatementPledges();
	    pledges.setDiscriminant(type);
	    statement.setPledges(pledges);
	    switch (type)
	    {
	    case SCP_ST_PREPARE:
	    {
	        SCPStatementPrepare p = new SCPStatementPrepare();
	        p.setQuorumSetHash(getLocalNode().getQuorumSetHash());
	        if (mCurrentBallot != null)
	        {
	            p.setBallot(mCurrentBallot);
	        }
	        if (mCommit != null)
	        {
	            p.setNC(mCommit.getCounter());
	        }
	        if (mPrepared != null)
	        {
	            p.setPrepared(mPrepared);//?? p.getPrepared().activate() = mPrepared;
	        }
	        if (mPreparedPrime != null)
	        {
	            p.setPreparedPrime(mPreparedPrime);
	        }
	        if (mHighBallot != null)
	        {
	            p.setNH(mHighBallot.getCounter());
	        }
	        pledges.setPrepare(p);
	    }
	    break;
	    case SCP_ST_CONFIRM:
	    {
	        SCPStatementConfirm c = new SCPStatementConfirm();
	        c.setQuorumSetHash(getLocalNode().getQuorumSetHash());
	        Assertions.assertTrue(areBallotsLessAndCompatible(mCommit, mHighBallot));
	        c.setBallot(mCurrentBallot);
	        c.setNPrepared(mPrepared.getCounter());
	        c.setNCommit(mCommit.getCounter());
	        c.setNH(mHighBallot.getCounter());
	        pledges.setConfirm(c);
	    }
	    break;
	    case SCP_ST_EXTERNALIZE:
	    {
	    	Assertions.assertTrue(areBallotsLessAndCompatible(mCommit, mHighBallot));
	       SCPStatementExternalize e = new SCPStatementExternalize();
	        e.setCommit(mCommit);
	        e.setNH(mHighBallot.getCounter());
	        e.setCommitQuorumSetHash(getLocalNode().getQuorumSetHash());
	        pledges.setExternalize(e);
	    }
	    break;
	    default:
	    	Assertions.abort();
	    }

	    return statement;
	}

	void emitCurrentStateStatement()
	{
	    SCPStatementType t;

	    switch (mPhase)
	    {
	    case SCP_PHASE_PREPARE:
	        t = SCPStatementType.SCP_ST_PREPARE;
	        break;
	    case SCP_PHASE_CONFIRM:
	        t = SCPStatementType.SCP_ST_CONFIRM;
	        break;
	    case SCP_PHASE_EXTERNALIZE:
	        t = SCPStatementType.SCP_ST_EXTERNALIZE;
	        break;
	    default:
	    	Assertions.abort();
	    	throw new IllegalStateException();
	    }

	    SCPStatement statement = createStatement(t);
	    SCPEnvelope envelope = mSlot.createEnvelope(statement);

	    boolean canEmit = (mCurrentBallot != null);

	    // if we generate the same envelope, don't process it again
	    // this can occur when updating h in PREPARE phase
	    // as statements only keep track of h.n (but h.x could be different)
	    SCPEnvelope lastEnv = mLatestEnvelopes.get(mSlot.getSCP().getLocalNodeID());

	    if (lastEnv == null || !(XdrUtils.envelopeEquals(lastEnv, envelope)))
	    {
	        if (mSlot.processEnvelope(envelope, true) == SCP.EnvelopeState.VALID)
	        {
	            if (canEmit &&
	                (mLastEnvelope == null|| isNewerStatement(mLastEnvelope.getStatement(),
	                                                    envelope.getStatement())))
	            {
	                mLastEnvelope = envelope;
	                // this will no-op if invoked from advanceSlot
	                // as advanceSlot consolidates all messages sent
	                sendLatestEnvelope();
	            }
	        }
	        else
	        {
	            // there is a bug in the application if it queued up
	            // a statement for itself that it considers invalid
	            throw new IllegalStateException("moved to a bad state (ballot protocol)");
	        }
	    }
	}

	void checkInvariants()
	{
	    if (mCurrentBallot != null)
	    {
	    	Assertions.assertTrue(mCurrentBallot.getCounter().getUint32() != 0);
	    }
	    if (mPrepared != null && mPreparedPrime != null)
	    {
	    	Assertions.assertTrue(areBallotsLessAndIncompatible(mPreparedPrime, mPrepared));
	    }
	    if (mCommit != null)
	    {
	    	Assertions.assertTrue(mCurrentBallot != null);
	    	Assertions.assertTrue(areBallotsLessAndCompatible(mCommit, mHighBallot));
	    	Assertions.assertTrue(areBallotsLessAndCompatible(mHighBallot, mCurrentBallot));
	    }

	    switch (mPhase)
	    {
	    case SCP_PHASE_PREPARE:
	        break;
	    case SCP_PHASE_CONFIRM:
	    	Assertions.assertTrue(mCommit != null);
	        break;
	    case SCP_PHASE_EXTERNALIZE:
	    	Assertions.assertTrue(mCommit != null);
	    	Assertions.assertTrue(mHighBallot != null);
	        break;
	    default:
	    	Assertions.abort();
	    }
	}

	LinkedHashSet<SCPBallot> getPrepareCandidates(SCPStatement hint)
	{
		LinkedHashSet<SCPBallot> hintBallots = new LinkedHashSet<>();//??? Set ??

	    switch (hint.getPledges().getDiscriminant())
	    {
	    case SCP_ST_PREPARE:
	    {
	        SCPStatementPrepare prep = checkNotNull(hint.getPledges().getPrepare());
	        hintBallots.add(prep.getBallot());
	        if (prep.getPrepared() != null)//?? prep.prepared
	        {
	            hintBallots.add(prep.getPrepared());
	        }
	        if (prep.getPreparedPrime() != null)
	        {
	            hintBallots.add(prep.getPreparedPrime());
	        }
	    }
	    break;
	    case SCP_ST_CONFIRM:
	    {
	        SCPStatementConfirm con = checkNotNull(hint.getPledges().getConfirm());
	        hintBallots.add(XdrUtils.newSCPBallot(con.getNPrepared(), con.getBallot().getValue()));
	        hintBallots.add(XdrUtils.newSCPBallot(XdrUtils.UINT32_MAX, con.getBallot().getValue()));
	    }
	    break;
	    case SCP_ST_EXTERNALIZE:
	    {
	        SCPStatementExternalize ext = checkNotNull(hint.getPledges().getExternalize());
	        hintBallots.add(XdrUtils.newSCPBallot(XdrUtils.UINT32_MAX, ext.getCommit().getValue()));
	    }
	    break;
	    default:
	    	Assertions.abort();
	    };

	    List<SCPBallot> _l = new LinkedList<SCPBallot>(hintBallots);
	    Collections.reverse(_l);
	    Iterator<SCPBallot> hitBallotsRevItr = _l.iterator();
	    
	    if(! hitBallotsRevItr.hasNext()) {
	    	log.warn("CHECK hitBallotsRevItr EMPTY");
	    }
	    
	    LinkedHashSet<SCPBallot> candidates = new LinkedHashSet<>();
	    while (hitBallotsRevItr.hasNext())
	    {
	        SCPBallot topVote = hitBallotsRevItr.next();

	        Value val = topVote.getValue();

	        // find candidates that may have been prepared
	        for (SCPEnvelope e : mLatestEnvelopes.values())
	        {
	            SCPStatement st = e.getStatement();
	            switch (st.getPledges().getDiscriminant())
	            {
	            case SCP_ST_PREPARE:
	            {
	                SCPStatementPrepare prep = checkNotNull(st.getPledges().getPrepare());
	                if (areBallotsLessAndCompatible(prep.getBallot(), topVote))
	                {
	                    candidates.add(prep.getBallot());
	                }
	                if (prep.getPrepared() != null &&
	                    areBallotsLessAndCompatible(prep.getPrepared(), topVote))
	                {
	                    candidates.add(prep.getPrepared());
	                }
	                if (prep.getPreparedPrime() != null &&
	                    areBallotsLessAndCompatible(prep.getPreparedPrime(), topVote))
	                {
	                    candidates.add(prep.getPreparedPrime());
	                }
	            }
	            break;
	            case SCP_ST_CONFIRM:
	            {
	                SCPStatementConfirm con = checkNotNull(st.getPledges().getConfirm());
	                if (areBallotsCompatible(topVote, con.getBallot()))
	                {
	                    candidates.add(topVote);
	                    if (XdrUtils.uint32LesserThan(con.getNPrepared(), topVote.getCounter()))
	                    {
	                        candidates.add(XdrUtils.newSCPBallot(con.getNPrepared(), val));
	                    }
	                }
	            }
	            break;
	            case SCP_ST_EXTERNALIZE:
	            {
	                SCPStatementExternalize ext = checkNotNull(st.getPledges().getExternalize());
	                if (areBallotsCompatible(topVote, ext.getCommit()))
	                {
	                    candidates.add(topVote);
	                }
	            }
	            break;
	            default:
	            	Assertions.abort();
	            }
	        }
	    }

	    return candidates;
	}

	void updateCurrentIfNeeded()
	{
	    if (mCurrentBallot == null || compareBallots(mCurrentBallot, mHighBallot) < 0)
	    {
	        bumpToBallot(mHighBallot, true);
	    }
	}

	boolean attemptPreparedAccept(SCPStatement hint)
	{
	    if (mPhase != SCPPhase.SCP_PHASE_PREPARE && mPhase != SCPPhase.SCP_PHASE_CONFIRM)
	    {
	        return false;
	    }

	    LinkedHashSet<SCPBallot> candidates = getPrepareCandidates(hint);
	    // see if we can accept any of the candidates, starting with the highest
	    for (SCPBallot ballot : candidates)
	    {
	        if (mPhase == SCPPhase.SCP_PHASE_CONFIRM)
	        {
	            // only consider the ballot if it may help us increase
	            // p (note: at this point, p ~ c)
	            if (!areBallotsLessAndCompatible(mPrepared, ballot))
	            {
	                continue;
	            }
	            Assertions.assertTrue(areBallotsCompatible(mCommit, ballot));
	        }

	        // if we already prepared this ballot, don't bother checking again

	        // if ballot <= p' ballot is neither a candidate for p nor p'
	        if (mPreparedPrime != null && compareBallots(ballot, mPreparedPrime) <= 0)
	        {
	            continue;
	        }

	        if (mPrepared != null)
	        {
	            // if ballot is already covered by p, skip
	            if (areBallotsLessAndCompatible(ballot, mPrepared))
	            {
	                continue;
	            }
	            // otherwise, there is a chance it increases p'
	        }

	        boolean accepted = federatedAccept(
	            // checks if any node is voting for this ballot
	            (SCPStatement st) -> {
	                boolean res;

	                switch (st.getPledges().getDiscriminant())
	                {
	                case SCP_ST_PREPARE:
	                {
	                	SCPStatementPrepare p = checkNotNull(st.getPledges().getPrepare());
	                    res = areBallotsLessAndCompatible(ballot, p.getBallot());
	                }
	                break;
	                case SCP_ST_CONFIRM:
	                {
	                	SCPStatementConfirm c = checkNotNull(st.getPledges().getConfirm());
	                    res = areBallotsCompatible(ballot, c.getBallot());
	                }
	                break;
	                case SCP_ST_EXTERNALIZE:
	                {
	                	SCPStatementExternalize e = checkNotNull(st.getPledges().getExternalize());
	                    res = areBallotsCompatible(ballot, e.getCommit());
	                }
	                break;
	                default:
	                    res = false;
	                    Assertions.abort();
	                }

	                return res;
	            }, (SCPStatement st) -> { return hasPreparedBallot(ballot, st); });
	        if (accepted)
	        {
	            return setPreparedAccept(ballot);
	        }
	    }

	    return false;
	}

	boolean setPreparedAccept(SCPBallot ballot)
	{
	        log.debug("SCP BallotProtocol::setPreparedAccept i: {$ b: {}",mSlot.getSlotIndex().getUint64(), mSlot.getSCP().ballotToStr(ballot));

	    // update our state
	    boolean didWork = setPrepared(ballot);

	    // check if we also need to clear 'c'
	    if (mCommit != null && mHighBallot != null)
	    {
	        if ((mPrepared != null &&
	             areBallotsLessAndIncompatible(mHighBallot, mPrepared)) ||
	            (mPreparedPrime != null &&
	             areBallotsLessAndIncompatible(mHighBallot, mPreparedPrime)))
	        {
	            Assertions.assertTrue(mPhase == SCPPhase.SCP_PHASE_PREPARE);
	            
	            mCommit = null;//?? mCommit.reset(); ??
	            didWork = true;
	        }
	    }

	    if (didWork)
	    {
	        mSlot.getSCPDriver().acceptedBallotPrepared(mSlot.getSlotIndex(),
	                                                    ballot);
	        emitCurrentStateStatement();
	    }

	    return didWork;
	}

	boolean attemptPreparedConfirmed(SCPStatement hint)
	{
	    if (mPhase != SCPPhase.SCP_PHASE_PREPARE)
	    {
	        return false;
	    }

	    // check if we could accept this ballot as prepared
	    if (mPrepared == null)
	    {
	        return false;
	    }

	    LinkedHashSet<SCPBallot> candidates = getPrepareCandidates(hint);

	    // see if we can accept any of the candidates, starting with the highest

	    
	    SCPBallot newH = null;//not nice miki

	    
	    
	    boolean newHfound = false;
	    Iterator<SCPBallot> candItr = candidates.iterator();
	    while (candItr.hasNext())
	    {
	    	 SCPBallot ballot = candItr.next();
	        // only consider it if we can potentially raise h
	        if (mHighBallot != null && compareBallots(mHighBallot, ballot) >= 0)
	        {
	            break;
	        }

	        boolean ratified = federatedRatify((SCPStatement st) -> hasPreparedBallot(ballot, st));
	        if (ratified)
	        {
	            newH = ballot;
	            newHfound = true;
	            break;
	        }
	    }

	    boolean res = false;

	    if (newHfound)
	    {
	        SCPBallot newC = XdrUtils.newSCPBallot(XdrUtils.UINT32_ZERO, XdrUtils.NO_VALUE);///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	        // now, look for newC (left as 0 if no update)
	        // step (3) from the paper
	        SCPBallot b = mCurrentBallot != null ? mCurrentBallot : new /*!!!!!!!!!!!!!!!!!!!!*/SCPBallot();
	        if (mCommit == null &&
	            (mPrepared == null || !areBallotsLessAndIncompatible(newH, mPrepared)) &&
	            (mPreparedPrime == null ||
	             !areBallotsLessAndIncompatible(newH, mPreparedPrime)))
	        {
	            // continue where we left off (cur is at newH at this point)
	        	while (candItr.hasNext())
	    	    {
	    	    	SCPBallot ballot = candItr.next();
	                if (compareBallots(ballot, b) < 0)
	                {
	                    break;
	                }
	                boolean ratified = federatedRatify((st) -> hasPreparedBallot(ballot, st));
	                if (ratified)
	                {
	                    newC = ballot;
	                }
	                else
	                {
	                    break;
	                }
	            }
	        }
	        res = setPreparedConfirmed(newC, newH);
	    }
	    return res;
	}

	boolean commitPredicate(SCPBallot ballot, UInt32Interval check,
	                                SCPStatement st)
	{
	    boolean res = false;
	    SCPStatementPledges pl = st.getPledges();
	    switch (pl.getDiscriminant())
	    {
	    case SCP_ST_PREPARE:
	        break;
	    case SCP_ST_CONFIRM:
	    {
	        SCPStatementConfirm c = checkNotNull(pl.getConfirm());
	        if (areBallotsCompatible(ballot, c.getBallot()))
	        {
	            res = XdrUtils.uint32LesserThanOrEquals(c.getNCommit(), check.getFirst()) 
	            	&& XdrUtils.uint32LesserThanOrEquals(check.getSecond(), c.getNH());
	        }
	    }
	    break;
	    case SCP_ST_EXTERNALIZE:
	    {
	    	SCPStatementExternalize e = pl.getExternalize();
	        if (areBallotsCompatible(ballot, e.getCommit()))
	        {
	            res = XdrUtils.uint32LesserThanOrEquals(e.getCommit().getCounter(), check.getFirst());
	        }
	    }
	    break;
	    default:
	        Assertions.abort();
	    }
	    return res;
	}

	boolean setPreparedConfirmed(SCPBallot newC,
	                                     SCPBallot newH)
	{
	        log.debug("SCP BallotProtocol::setPreparedConfirmed i: {} h: {}", mSlot.getSlotIndex().getUint64(),
	                           mSlot.getSCP().ballotToStr(newH));

	    boolean didWork = false;

	    if (mHighBallot == null || compareBallots(newH, mHighBallot) > 0)
	    {
	        didWork = true;
	        mHighBallot = newH;
	    }

	    if (newC.getCounter().getUint32() != 0)
	    {
	    	Assertions.assertTrue(mCommit == null);
	        mCommit = newC;
	        didWork = true;
	    }

	    if (didWork)
	    {
	        updateCurrentIfNeeded();

	        mSlot.getSCPDriver().confirmedBallotPrepared(mSlot.getSlotIndex(),
	                                                     newH);
	        emitCurrentStateStatement();
	    }

	    return didWork;
	}
	
	UInt32Interval findExtendedInterval(/*UInt32Interval candidate,*/
	                                     Collection<Uint32> boundaries,
	                                     Predicate<UInt32Interval> pred)
	{
		UInt32Interval candidate = new UInt32Interval(XdrUtils.UINT32_ZERO, XdrUtils.UINT32_ZERO);
	    // iterate through interesting boundaries, starting from the top
	    for (Uint32 b : boundaries)
	    {

	    	UInt32Interval cur;
	        if (candidate.getFirst().getUint32() == 0)
	        {
	            // first, find the high bound
	            cur = new UInt32Interval(b, b);
	        }
	        else if (XdrUtils.uint32GreaterThan(b, candidate.getSecond())) // invalid
	        {
	            continue;
	        }
	        else
	        {
	        	cur = new UInt32Interval(b, candidate.getSecond());
//	            cur.setFirst(b);
//	            cur.setSecond(candidate.getSecond());
	        }

	        if (pred.test(cur))
	        {
	            candidate = cur;
	        }
	        else if (candidate.getFirst().getUint32() != 0)
	        {
	            // could not extend further
	            break;
	        }
	    }
	    return candidate;
	}

	LinkedHashSet<Uint32> getCommitBoundariesFromStatements(SCPBallot ballot)
	{
		LinkedHashSet<Uint32> res = new LinkedHashSet<>();
	    for (SCPEnvelope env : mLatestEnvelopes.values())
	    {
	        SCPStatementPledges pl = env.getStatement().getPledges();
	        switch (pl.getDiscriminant())
	        {
	        case SCP_ST_PREPARE:
	        {
	            SCPStatementPrepare p = checkNotNull(pl.getPrepare());
	            if (areBallotsCompatible(ballot, p.getBallot()))
	            {
	                if (p.getNC() != null)
	                {
	                    res.add(p.getNC());
	                    res.add(p.getNH());
	                }
	            }
	        }
	        break;
	        case SCP_ST_CONFIRM:
	        {
	        	SCPStatementConfirm c = checkNotNull(pl.getConfirm());
	            if (areBallotsCompatible(ballot, c.getBallot()))
	            {
	                res.add(c.getNCommit());
	                res.add(c.getNH());
	            }
	        }
	        break;
	        case SCP_ST_EXTERNALIZE:
	        {
	        	SCPStatementExternalize e = checkNotNull(pl.getExternalize());
	            if (areBallotsCompatible(ballot, e.getCommit()))
	            {
	                res.add(e.getCommit().getCounter());
	                res.add(e.getNH());
	                res.add(XdrUtils.UINT32_MAX);
	            }
	        }
	        break;
	        default:
	            Assertions.abort();
	        }
	    }
	    return res;
	}

	boolean attemptAcceptCommit(SCPStatement hint)
	{
	    if (mPhase != SCPPhase.SCP_PHASE_PREPARE && mPhase != SCPPhase.SCP_PHASE_CONFIRM)
	    {
	        return false;
	    }

	    // extracts value from hint
	    // note: ballot.counter is only used for logging purpose as we're looking at
	    // possible value to commit
	    SCPBallot ballot;
	    switch (hint.getPledges().getDiscriminant())
	    {
	    case SCP_ST_PREPARE:
	    {
	        SCPStatementPrepare prep = checkNotNull(hint.getPledges().getPrepare());
	        if (prep.getNC().getUint32() != 0)
	        {
	            ballot = XdrUtils.newSCPBallot(prep.getNH(), prep.getBallot().getValue());
	        }
	        else
	        {
	            return false;
	        }
	    }
	    break;
	    case SCP_ST_CONFIRM:
	    {
	    	SCPStatementConfirm con = checkNotNull(hint.getPledges().getConfirm());
	        ballot = XdrUtils.newSCPBallot(con.getNH(), con.getBallot().getValue());
	    }
	    break;
	    case SCP_ST_EXTERNALIZE:
	    {
	    	SCPStatementExternalize ext = checkNotNull(hint.getPledges().getExternalize());
	        ballot = XdrUtils.newSCPBallot(ext.getNH(), ext.getCommit().getValue());
	        break;
	    }
	    default:
	    	ballot = null;//just for javac complaining about initialization
	    	Assertions.abort();
	    };

	    if (mPhase == SCPPhase.SCP_PHASE_CONFIRM)
	    {
	        if (!areBallotsCompatible(ballot, mHighBallot))
	        {
	            return false;
	        }
	    }

	    Predicate<UInt32Interval> pred = (UInt32Interval cur) -> {
	        return federatedAccept(
	            (SCPStatement st) -> {
	                boolean res = false;
	                SCPStatementPledges pl = st.getPledges();
	                switch (pl.getDiscriminant())
	                {
	                case SCP_ST_PREPARE:
	                {
	                	SCPStatementPrepare p = checkNotNull(pl.getPrepare());
	                    if (areBallotsCompatible(ballot, p.getBallot()))
	                    {
	                        if (p.getNC().getUint32() != 0)
	                        {
	                            res = uint32LesserThanOrEquals(p.getNC(), cur.getFirst()) && uint32LesserThanOrEquals(cur.getSecond(), p.getNH());
	                        }
	                    }
	                }
	                break;
	                case SCP_ST_CONFIRM:
	                {
	                	SCPStatementConfirm c = checkNotNull(pl.getConfirm());
	                    if (areBallotsCompatible(ballot, c.getBallot()))
	                    {
	                        res = uint32LesserThanOrEquals(c.getNCommit(), cur.getFirst());
	                    }
	                }
	                break;
	                case SCP_ST_EXTERNALIZE:
	                {
	                	SCPStatementExternalize e =checkNotNull( pl.getExternalize());
	                    if (areBallotsCompatible(ballot, e.getCommit()))
	                    {
	                        res = uint32LesserThanOrEquals(e.getCommit().getCounter(), cur.getFirst());
	                    }
	                }
	                break;
	                default:
	                	Assertions.abort();
	                }
	                return res;
	            }
	            ,
	            (SCPStatement st) -> commitPredicate(ballot, cur, st));
	    };

	    // build the boundaries to scan
	    LinkedHashSet<Uint32> boundaries = getCommitBoundariesFromStatements(ballot);

	    if (boundaries.isEmpty())
	    {
	        return false;
	    }

	    // now, look for the high interval
	    UInt32Interval candidate = findExtendedInterval(/*candidate, */boundaries, pred);//TODO UInt32Interval passed by ref not nice

	    boolean res = false;

	    if (candidate.getFirst().getUint32() != 0)
	    {
	        if (mPhase != SCPPhase.SCP_PHASE_CONFIRM ||
	            candidate.getSecond().getUint32() > mHighBallot.getCounter().getUint32())
	        {
	            SCPBallot c = XdrUtils.newSCPBallot(candidate.getFirst(), ballot.getValue());
	            SCPBallot h = XdrUtils.newSCPBallot(candidate.getSecond(), ballot.getValue());
	            res = setAcceptCommit(c, h);
	        }
	    }

	    return res;
	}

	boolean setAcceptCommit(SCPBallot c, SCPBallot h)
	{
	    log.debug("SCP BallotProtocol::setAcceptCommit i: {} nec c: {} new h: {}", mSlot.getSlotIndex().getUint64()
	                           , mSlot.getSCP().ballotToStr(c)
	                           , mSlot.getSCP().ballotToStr(h));

	    boolean didWork = false;

	    if (mHighBallot == null || mCommit == null || compareBallots(mHighBallot, h) != 0 ||
	        compareBallots(mCommit, c) != 0)
	    {
	        mCommit = c;
	        mHighBallot = h;

	        didWork = true;
	    }

	    if (mPhase == SCPPhase.SCP_PHASE_PREPARE)
	    {
	        mPhase = SCPPhase.SCP_PHASE_CONFIRM;
	        if (mCurrentBallot != null && !areBallotsLessAndCompatible(h, mCurrentBallot))
	        {
	            bumpToBallot(h, false);
	        }
	        mPreparedPrime = null;//.reset();

	        didWork = true;
	    }

	    if (didWork)
	    {
	        updateCurrentIfNeeded();

	        mSlot.getSCPDriver().acceptedCommit(mSlot.getSlotIndex(), h);
	        emitCurrentStateStatement();
	    }

	    return didWork;
	}

	boolean attemptBump()
	{
	    if (mPhase == SCPPhase.SCP_PHASE_PREPARE || mPhase == SCPPhase.SCP_PHASE_CONFIRM)
	    {
	        // find all counters
	        LinkedHashSet<Uint32> allCounters = new LinkedHashSet<>();
	        for (SCPEnvelope e : mLatestEnvelopes.values())
	        {
	            SCPStatement st = e.getStatement();
	            switch (st.getPledges().getDiscriminant())
	            {
	            case SCP_ST_PREPARE:
	            {
	                SCPStatementPrepare p = checkNotNull(st.getPledges().getPrepare());
	                allCounters.add(p.getBallot().getCounter());
	            }
	            break;
	            case SCP_ST_CONFIRM:
	            {
	                SCPStatementConfirm c = checkNotNull(st.getPledges().getConfirm());
	                allCounters.add(c.getBallot().getCounter());
	            }
	            break;
	            case SCP_ST_EXTERNALIZE:
	            {
	                allCounters.add(XdrUtils.UINT32_MAX);
	            }
	            break;
	            default:
	                Assertions.abort();
	            };
	        }
	        Uint32 targetCounter = mCurrentBallot != null ? mCurrentBallot.getCounter() : XdrUtils.UINT32_ZERO;

	        // uses 0 as a way to track if a v-blocking set is at a higher counter
	        // if so, we move to that smallest counter
	        allCounters.add(targetCounter);

	        // go through the counters, find the smallest not v-blocking
	        for (Uint32 n : allCounters)
	        {
	            if (XdrUtils.uint32LesserThan(n, targetCounter))
	            {
	                break;
	            }

	            boolean vBlocking = LocalNode.isVBlocking(
	                getLocalNode().getQuorumSet(), mLatestEnvelopes,
	                (SCPStatement st) -> {
	                    boolean res;
	                    SCPStatementPledges pl = st.getPledges();
	                    if (pl.getDiscriminant() == SCPStatementType.SCP_ST_PREPARE)
	                    {
	                        SCPStatementPrepare p = checkNotNull(pl.getPrepare());
	                        res = XdrUtils.uint32LesserThan(n, p.getBallot().getCounter());
	                    }
	                    else
	                    {
	                        if (pl.getDiscriminant() == SCPStatementType.SCP_ST_CONFIRM)
	                        {
	                            res = XdrUtils.uint32LesserThan(n, pl.getConfirm().getBallot().getCounter());
	                        }
	                        else
	                        {
	                            res = XdrUtils.uint32NotEquals(n, XdrUtils.UINT32_MAX);
	                        }
	                    }
	                    return res;
	                });

	            if (XdrUtils.uint32Equals(n, targetCounter))
	            {
	                // if current counter is not behind, don't do anything
	                if (!vBlocking)
	                {
	                    break;
	                }
	            }
	            else
	            {
	                if (!vBlocking)
	                {
	                    // move to n
	                    return abandonBallot(n);
	                }
	            }
	        }
	    }

	    return false;
	}

	boolean attemptConfirmCommit(SCPStatement hint)
	{
	    if (mPhase != SCPPhase.SCP_PHASE_CONFIRM)
	    {
	        return false;
	    }

	    if (mHighBallot == null || mCommit == null)
	    {
	        return false;
	    }

	    // extracts value from hint
	    // note: ballot.counter is only used for logging purpose
	    SCPBallot ballot;
	    switch (hint.getPledges().getDiscriminant())
	    {
	    case SCP_ST_PREPARE:
	    {
	        return false;
	    }
	    //break;
	    case SCP_ST_CONFIRM:
	    {
	        SCPStatementConfirm con = checkNotNull(hint.getPledges().getConfirm());
	        ballot = XdrUtils.newSCPBallot(con.getNH(), con.getBallot().getValue());
	    }
	    break;
	    case SCP_ST_EXTERNALIZE:
	    {
	        SCPStatementExternalize ext = checkNotNull(hint.getPledges().getExternalize());
	        ballot = XdrUtils.newSCPBallot(ext.getNH(), ext.getCommit().getValue());
	        break;
	    }
	    default:
	    	ballot = null;//javac
	        Assertions.abort();
	    };

	    if (!areBallotsCompatible(ballot, mCommit))
	    {
	        return false;
	    }

	    LinkedHashSet<Uint32> boundaries = getCommitBoundariesFromStatements(ballot);

	    Predicate<UInt32Interval> pred = (UInt32Interval cur) -> {
	        return federatedRatify( (st) -> commitPredicate(ballot, cur, st));
	    };


	    UInt32Interval candidate = 
	    findExtendedInterval(/*candidate, */boundaries, pred);

	    boolean res = candidate.getFirst().getUint32() != 0;
	    if (res)
	    {
	        SCPBallot c = XdrUtils.newSCPBallot(candidate.getFirst(), ballot.getValue());
	        SCPBallot h = XdrUtils.newSCPBallot(candidate.getSecond(), ballot.getValue());
	        return setConfirmCommit(c, h);
	    }
	    return res;
	}

	boolean setConfirmCommit(SCPBallot c, SCPBallot h)
	{
	    log.debug("SCP BallotProtocol::setConfirmCommit i: {} new c: {} new h: {}"
	                           , mSlot.getSlotIndex().getUint64()
	                           , mSlot.getSCP().ballotToStr(c)
	                           , mSlot.getSCP().ballotToStr(h));

	    mCommit = c;
	    mHighBallot = h;
	    updateCurrentIfNeeded();

	    mPhase = SCPPhase.SCP_PHASE_EXTERNALIZE;

	    emitCurrentStateStatement();

	    mSlot.stopNomination();

	    mSlot.getSCPDriver().valueExternalized(mSlot.getSlotIndex(),
	                                           mCommit.getValue());

	    return true;
	}

	boolean hasPreparedBallot(SCPBallot ballot, SCPStatement st)
	{
	    boolean res;

	    switch (st.getPledges().getDiscriminant())
	    {
	    case SCP_ST_PREPARE:
	    {
	        SCPStatementPrepare p = checkNotNull(st.getPledges().getPrepare());
	        res =
	            (p.getPrepared() != null && areBallotsLessAndCompatible(ballot, p.getPrepared())) ||
	            (p.getPreparedPrime() != null &&
	             areBallotsLessAndCompatible(ballot, p.getPreparedPrime()));
	    }
	    break;
	    case SCP_ST_CONFIRM:
	    {
	    	SCPStatementConfirm c = checkNotNull(st.getPledges().getConfirm());
	        SCPBallot prepared = XdrUtils.newSCPBallot(c.getNPrepared(), c.getBallot().getValue());
	        res = areBallotsLessAndCompatible(ballot, prepared);
	    }
	    break;
	    case SCP_ST_EXTERNALIZE:
	    {
	    	SCPStatementExternalize e = checkNotNull(st.getPledges().getExternalize());
	        res = areBallotsCompatible(ballot, e.getCommit());
	    }
	    break;
	    default:
	        res = false;
	        Assertions.dbgAbort();
	    }

	    return res;
	}

	Hash getCompanionQuorumSetHashFromStatement(SCPStatement st)
	{
	    Hash h;
	    switch (st.getPledges().getDiscriminant())
	    {
	    case SCP_ST_PREPARE:
	        h = st.getPledges().getPrepare().getQuorumSetHash();
	        break;
	    case SCP_ST_CONFIRM:
	        h = st.getPledges().getConfirm().getQuorumSetHash();
	        break;
	    case SCP_ST_EXTERNALIZE:
	        h = st.getPledges().getExternalize().getCommitQuorumSetHash();
	        break;
	    default:
	    	h = null;//javac
	    	Assertions.dbgAbort();
	    }
	    return h;
	}

	static SCPBallot getWorkingBallot(SCPStatement st)
	{
	    SCPBallot res;
	    switch (st.getPledges().getDiscriminant())
	    {
	    case SCP_ST_PREPARE:
	        res = st.getPledges().getPrepare().getBallot();
	        break;
	    case SCP_ST_CONFIRM:
	    {
	        SCPStatementConfirm con = st.getPledges().getConfirm();
	        res = XdrUtils.newSCPBallot(con.getNCommit(), con.getBallot().getValue());
	    }
	    break;
	    case SCP_ST_EXTERNALIZE:
	        res = st.getPledges().getExternalize().getCommit();
	        break;
	    default:
	    	res = null;//javac
	    	Assertions.dbgAbort();
	    }
	    return res;
	}

	boolean setPrepared(SCPBallot ballot)
	{
	    boolean didWork = false;

	    if (mPrepared != null)
	    {
	        int comp = compareBallots(mPrepared, ballot);
	        if (comp < 0)
	        {
	            if (!areBallotsCompatible(mPrepared, ballot))
	            {
	                mPreparedPrime = mPrepared;
	            }
	            mPrepared = ballot;
	            didWork = true;
	        }
	        else if (comp > 0)
	        {
	            // check if we should update only p'
	            if (mPreparedPrime == null || compareBallots(mPreparedPrime, ballot) < 0)
	            {
	                mPreparedPrime = ballot;
	                didWork = true;
	            }
	        }
	    }
	    else
	    {
	        mPrepared = ballot;
	        didWork = true;
	    }
	    return didWork;
	}

	////PRIVATE
private int compareBallots(@Nullable SCPBallot b1, @Nullable SCPBallot b2)
{
    int res;
    if (b1 != null && b2 != null)
    {
        res = compareNonNullBallots(b1, b2);
    }
    else if (b1 != null)
    {
        res = 1;
    }
    else if (b2 != null)
    {
        res = -1;
    }
    else
    {
        res = 0;
    }
    return res;
}

private int compareNonNullBallots(SCPBallot b1, SCPBallot b2)
{
    if (uint32LesserThan(b1.getCounter(), b2.getCounter()))
    {
        return -1;
    }
    else if (uint32LesserThan(b2.getCounter(), b1.getCounter()))
    {
        return 1;
    }
    // ballots are also strictly ordered by value
    if (valueLesserThan(b1.getValue(), b2.getValue()))
    {
        return -1;
    }
    else if (valueLesserThan(b2.getValue(), b1.getValue()))
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

private boolean areBallotsCompatible(SCPBallot b1, SCPBallot b2)
{
    return valueEquals(b1.getValue(), b2.getValue());
}

private boolean areBallotsLessAndIncompatible(SCPBallot b1, SCPBallot b2)
{
    return (compareBallots(b1, b2) <= 0) && !areBallotsCompatible(b1, b2);
}

boolean areBallotsLessAndCompatible(SCPBallot b1, SCPBallot b2)
{
    return (compareBallots(b1, b2) <= 0) && areBallotsCompatible(b1, b2);
}

void setStateFromEnvelope(SCPEnvelope e)
{
    if (mCurrentBallot != null)
    {
        throw new RuntimeException(
            "Cannot set state after starting ballot protocol");
    }

    recordEnvelope(e);

    mLastEnvelope = e;
    mLastEnvelopeEmit = mLastEnvelope;

    SCPStatementPledges pl = e.getStatement().getPledges();

    switch (pl.getDiscriminant())
    {
    case SCP_ST_PREPARE:
    {
        SCPStatementPrepare prep = pl.getPrepare();
        SCPBallot b = prep.getBallot();
        bumpToBallot(b, true);
        if (prep.getPrepared() != null)
        {
            mPrepared = prep.getPrepared();
        }
        if (prep.getPreparedPrime() != null)
        {
            mPreparedPrime = prep.getPreparedPrime();
        }
        if (prep.getNH() != null)
        {
            mHighBallot = XdrUtils.newSCPBallot(prep.getNH(), b.getValue());
        }
        if (prep.getNC() != null)
        {
            mCommit = XdrUtils.newSCPBallot(prep.getNC(), b.getValue());
        }
        mPhase = SCPPhase.SCP_PHASE_PREPARE;
    }
    break;
    case SCP_ST_CONFIRM:
    {
        SCPStatementConfirm c = pl.getConfirm();
        Value v = c.getBallot().getValue();
        bumpToBallot(c.getBallot(), true);
        mPrepared = XdrUtils.newSCPBallot(c.getNPrepared(), v);
        mHighBallot = XdrUtils.newSCPBallot(c.getNH(), v);
        mCommit = XdrUtils.newSCPBallot(c.getNCommit(), v);
        mPhase = SCPPhase.SCP_PHASE_CONFIRM;
    }
    break;
    case SCP_ST_EXTERNALIZE:
    {
    	SCPStatementExternalize ext = pl.getExternalize();
        Value v = ext.getCommit().getValue();
        bumpToBallot(XdrUtils.newSCPBallot(XdrUtils.UINT32_MAX, v), true);
        mPrepared = XdrUtils.newSCPBallot(XdrUtils.UINT32_MAX, v);
        mHighBallot = XdrUtils.newSCPBallot(ext.getNH(), v);
        mCommit = ext.getCommit();
        mPhase = SCPPhase.SCP_PHASE_EXTERNALIZE;
    }
    break;
    default:
        Assertions.dbgAbort();
    }
}

List<SCPEnvelope> getCurrentState() //const
{
    List<SCPEnvelope> res = new ArrayList<>(mLatestEnvelopes.size());
    for (Entry<NodeID,SCPEnvelope> n : mLatestEnvelopes.entrySet())
    {
        // only return messages for self if the slot is fully validated
        if (!(    XdrUtils.nodeIDEquals(    n.getKey(), mSlot.getSCP().getLocalNodeID()  )   ) ||
            mSlot.isFullyValidated())
        {
            res.add(n.getValue());
        }
    }
    return res;
}

List<SCPEnvelope> getExternalizingState() //const
{
    if (mPhase == SCPPhase.SCP_PHASE_EXTERNALIZE)
    {
        List<SCPEnvelope> res = new ArrayList<>(mLatestEnvelopes.size());
        for (Entry<NodeID,SCPEnvelope> n : mLatestEnvelopes.entrySet())
        {
            if (!(    XdrUtils.nodeIDEquals(    n.getKey(), mSlot.getSCP().getLocalNodeID()  )   ))
            {
                // good approximation: statements with the value that
                // externalized
                // we could filter more using mConfirmedPrepared as well
                if (areBallotsCompatible(getWorkingBallot(n.getValue().getStatement()),
                                         mCommit))
                {
                    res.add(n.getValue());
                }
            }
            else if (mSlot.isFullyValidated())
            {
                // only return messages for self if the slot is fully validated
                res.add(n.getValue());
            }
        }
        return res;
    } else {
    	return Collections.emptyList();
    }
}

void advanceSlot(SCPStatement hint)
{
    mCurrentMessageLevel++;
    log.debug("SCP BallotProtocol::advanceSlot {} {}",
        mCurrentMessageLevel, getLocalState());

    if (mCurrentMessageLevel >= MAX_ADVANCE_SLOT_RECURSION)
    {
        throw new RuntimeException(
            "maximum number of transitions reached in advanceSlot");
    }

    // Check if we should call `ballotDidHearFromQuorum`
    // we do this here so that we have a chance to evaluate it between
    // transitions
    // when a single message causes several
    if (! Boolean.TRUE.equals(mHeardFromQuorum) && mCurrentBallot != null)
    {
        if (LocalNode.isQuorum(
                getLocalNode().getQuorumSet(), 
                mLatestEnvelopes,
                
                (SCPStatement st) -> mSlot.getQuorumSetFromStatement(st),
                
                (SCPStatement st) -> {
                    boolean res;
                    if (st.getPledges().getDiscriminant() == SCPStatementType.SCP_ST_PREPARE)
                    {
                        res = XdrUtils.uint32LesserThanOrEquals(mCurrentBallot.getCounter(), 
                              st.getPledges().getPrepare().getBallot().getCounter());
                    }
                    else
                    {
                        res = true;
                    }
                    return res;
                }
        		))
        {
            mHeardFromQuorum = true;
            mSlot.getSCPDriver().ballotDidHearFromQuorum(mSlot.getSlotIndex(),
                                                         mCurrentBallot);
        }
    }

    // attempt* methods will queue up messages, causing advanceSlot to be
    // called recursively

    // done in order so that we follow the steps from the white paper in
    // order
    // allowing the state to be updated properly

    boolean didWork = false;

    didWork = attemptPreparedAccept(hint) || didWork;

    didWork = attemptPreparedConfirmed(hint) || didWork;

    didWork = attemptAcceptCommit(hint) || didWork;

    didWork = attemptConfirmCommit(hint) || didWork;

    // only bump after we're done with everything else
    if (mCurrentMessageLevel == 1)
    {
        boolean didBump = false;
        do
        {
            // attemptBump may invoke advanceSlot recursively
            didBump = attemptBump();
            didWork = didBump || didWork;
        } while (didBump);
    }

    log.debug("SCP BallotProtocol::advanceSlot {} - exiting {}",
                           mCurrentMessageLevel, getLocalState());

    --mCurrentMessageLevel;

    if (didWork)
    {
        sendLatestEnvelope();
    }
}

SCPDriver.ValidationLevel validateValues(SCPStatement st)
{
    LinkedHashSet<Value> values = new LinkedHashSet<>();
    switch (st.getPledges().getDiscriminant())
    {
    case SCP_ST_PREPARE:
    {
        SCPStatementPrepare prep = st.getPledges().getPrepare();
        SCPBallot b = prep.getBallot();
        if (b.getCounter().getUint32() != 0)
        {
            values.add(prep.getBallot().getValue());
        }
        if (prep.getPrepared() != null)
        {
            values.add(prep.getPrepared().getValue());
        }
    }
    break;
    case SCP_ST_CONFIRM:
        values.add(st.getPledges().getConfirm().getBallot().getValue());
        break;
    case SCP_ST_EXTERNALIZE:
        values.add(st.getPledges().getExternalize().getCommit().getValue());
        break;
    default:
        // This shouldn't happen
        return SCPDriver.ValidationLevel.kInvalidValue;
    }
    SCPDriver.ValidationLevel res = SCPDriver.ValidationLevel.kFullyValidatedValue;
    for (Value v : values)
    {
    	SCPDriver.ValidationLevel tr = mSlot.getSCPDriver().validateValue(mSlot.getSlotIndex(), v);
        if (tr != SCPDriver.ValidationLevel.kFullyValidatedValue)
        {
            if (tr == SCPDriver.ValidationLevel.kInvalidValue)
            {
                res = SCPDriver.ValidationLevel.kInvalidValue;
            }
            else
            {
                res = SCPDriver.ValidationLevel.kMaybeValidValue;
            }
        }
    }
    return res;
}

void sendLatestEnvelope()
{
    // emit current envelope if needed
    if (mCurrentMessageLevel == 0 && mLastEnvelope != null && mSlot.isFullyValidated())
    {
        if (mLastEnvelopeEmit == null || mLastEnvelope != mLastEnvelopeEmit)//TODO use .equals ???? 
        {
            mLastEnvelopeEmit = mLastEnvelope;
            mSlot.getSCPDriver().emitEnvelope(mLastEnvelopeEmit);
        }
    }
}



String getLocalState()// const
{

return "i: " + mSlot.getSlotIndex().getUint64() + " | " + mPhase.name()
+ " | b: " + mSlot.getSCP().ballotToStr(mCurrentBallot)
+ " | p: " + mSlot.getSCP().ballotToStr(mPrepared)
+ " | p': " + mSlot.getSCP().ballotToStr(mPreparedPrime)
+ " | h: " + mSlot.getSCP().ballotToStr(mHighBallot)
+ " | c: " + mSlot.getSCP().ballotToStr(mCommit)
+ " | M: " + mLatestEnvelopes.size();

}


LocalNode getLocalNode()
{
    return mSlot.getSCP().getLocalNode();
}

boolean federatedAccept(StatementPredicate voted,
                                StatementPredicate accepted)
{
    return mSlot.federatedAccept(voted, accepted, mLatestEnvelopes);
}

boolean federatedRatify(StatementPredicate voted)
{
    return mSlot.federatedRatify(voted, mLatestEnvelopes);
}

SCPEnvelope getLastMessageSend()
{
    return mLastEnvelopeEmit;
}

void dumpInfo(/*Json::Value&*/Object ret) //by ref info dumped into ret
{
	//TODO
//    Json::Value& state = ret["ballotProtocol"];
//    state["heard"] = mHeardFromQuorum;
//    state["ballot"] = mSlot.getSCP().ballotToStr(mCurrentBallot);
//    state["phase"] = phaseNames[mPhase];
//
//    state["state"] = getLocalState();
}

void dumpQuorumInfo(/*Json::Value&O*/Object ret, NodeID id, boolean summary)//by ref info dumped into ret
{
//TODO
}
}
